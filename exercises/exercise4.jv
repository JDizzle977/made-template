
valuetype positiveInt oftype integer{
    constraints: [positiveIntConstraint];
}
constraint positiveIntConstraint oftype RangeConstraint{
    lowerBound: 0;
    lowerBoundInclusive: false;
}

valuetype Month oftype integer{
    constraints: [PositiveMonthConstraint];
}
constraint PositiveMonthConstraint oftype RangeConstraint{
    lowerBound: 1;
    upperBound: 12;
}


valuetype string_no_number oftype text {
    constraints: [ OnlyStringConstraing ];
}
constraint OnlyStringConstraing oftype RegexConstraint { // Everything thats not a 3 letter country code is invalid, thus empty cells are invalid too 
    regex: /^[a-zA-Z]+$/;                 
}


valuetype BooleanGER oftype text{
    constraints: [BooleanGERConstraint];
}

constraint BooleanGERConstraint oftype AllowlistConstraint{
    allowlist: ["Ja", "Nein"];
}

transform TransformCelsiusToFarenheit {
    from CelsiusTemp oftype decimal;
    to FahrenheitTemp oftype decimal;

    FahrenheitTemp: (CelsiusTemp * 9/5) + 32;
}


pipeline BatteryTemperaturePipeline {

    block BatteryTemperatureDataHttpExtractor oftype HttpExtractor{                
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter{
        archiveType: "zip";
    }

    block SelectDataFile oftype FilePicker{
        path: "/data.csv";
    }

    block GetTextFile oftype TextFileInterpreter{}
                                                        
    block GetAsCSV oftype CSVInterpreter{
        delimiter: ';';
    }

    block PreFilterColumns oftype CellRangeSelector{
        select: range A1:K*;
    }

    block RemoveColumns oftype ColumnDeleter{
        delete: [column F, column G, column H, column I];
    }

    block HeaderRenaming oftype CellWriter {     // A1:F1 as the new sheet data begins at the top left of the sheet
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block TemperatureTableInterpreter oftype TableInterpreter{
        header: false;
        columns: [
            "id" oftype positiveInt,
            "producer" oftype string_no_number,
            "model" oftype text, 
            "month" oftype Month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
            "Geraet aktiv" oftype BooleanGER,
        ];
    }

    block ConvertTemp oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: TransformCelsiusToFarenheit;
    }

    block ConvertBatteryTemp oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: TransformCelsiusToFarenheit;
    }

    block TemperaturesDB oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
    }

    BatteryTemperatureDataHttpExtractor
        -> ZipArchiveInterpreter
        -> SelectDataFile
        -> GetTextFile
        -> GetAsCSV
        -> PreFilterColumns
        -> RemoveColumns
        -> HeaderRenaming
        -> TemperatureTableInterpreter
        -> ConvertTemp
        -> ConvertBatteryTemp
        -> TemperaturesDB;

}